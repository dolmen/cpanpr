#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use lib 'lib';
use CPANPR;
use YAML::XS;

use Coro qw(async async_pool cede);
use EV;
use AnyEvent;
use LWP::Protocol::AnyEvent::http;
use Net::GitHub::V3;

my $gh = Net::GitHub::V3->new;
$gh->ua->protocols_allowed([qw<http https>]);

my $data = CPANPR::load 'resources/january.html';
my $created_search = 'created:2015-01-01..2015-02-01';

# TODO implement rate limit
#my @members = keys %$data;
my @members = qw<dolmen rjbs frioux neilbowers>;

my @async;
foreach my $m (@members) {
    push @async,
    async {
	my ($m, $d) = @_;
	#print "repo:$d->{repo} author:$m is:pr $created_expr\n";
	my %result = $gh->search->issues({
	    q => "repo:$d->{repo} author:$m is:pr $created_search",
	});
	#print "Fetched $m.\n";
	cede;
	# TODO handle when $result{incomplete_result}
	#print Dump(\%result);
	#use JSON::MaybeXS;
	#print JSON::MaybeXS->new->canonical->pretty->encode(\%result);
	my @prs =
	    sort { $a->{number} <=> $b->{number} }
	    map {
		my $pr = $_;
		+{
		    map { ($_ => $pr->{$_}) } qw<number html_url title state created_at>
		}
	    }
	    @{ $result{items} };
	#print Dump(\@prs);
	$d->{pull_requests} = \@prs;
	#print "Done $m.\n";
    } $m, $data->{$m};
}

$_->join for @async;

print Dump({ map { ($_ => $data->{$_}) } @members});
